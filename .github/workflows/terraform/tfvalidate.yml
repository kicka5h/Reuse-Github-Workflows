name: "terraform-validate"

on:
  workflow_call:
    inputs:
      plan_args:
        required: false
        type: string
        description: "Terraform Plan Arguments"

jobs:
  PR-Validate:
    name: PR Validate
    runs-on: az-terraform
    defaults:
      run:
        working-directory: ./**

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Terraform
        id: install_terraform
        uses: hashicorp/setup-terraform@v2

      - name: Check Github Configure
        id: GH_CHeck
        run: git config --global --list

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Fmt
        id: fmt
        run: terraform fmt --recursive

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan \
            -lock=false \
            -input=false \
            ${{ plan_args }}

      - uses: actions/github-script@v6
        if: ${{ github.event_name == 'pull_request' }}
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          VALIDATION: "${{ steps.validate.outputs.stdout }}"
        with:
          github-token: ${{ secrets.PAT }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })

            
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\` ${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${process.env.VALIDATION}
            \`\`\`

            </details>

            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \, Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }          